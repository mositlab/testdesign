@use "sass:math";
/* dart sass needs math.div() instead of normal divisions outside of calc() */

.appWrapper {
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;

  .appWrapper__mobileToggle {
    display: none;

    .button {
      border-color: rgba(var(--color-base600), 1);
      margin-top: 0;
      margin-bottom: 0;
      padding: 8px 6px 8px 10px;

      .iconUxt {
        color: rgba(var(--color-base600), 1);
      }

      &.is-activated {
        background-color: rgba(var(--color-base450), 1);

        .iconUxt {
          color: rgba(var(--color-base1000), 1);
        }
      }

      &.leadingRegionToggle {
        display: none;
      }

      &.contextRegionToggle {
        display: none;

        .iconUxt {
          transform: rotate(180deg);
        }
      }
    }


    @include breakpoint(max-width $breakpointLayoutMobile) {
      background-color: rgba(var(--color-interface-secondary), 1);
      box-sizing: border-box;
      border-bottom: 1px solid rgba(var(--color-border), 1);
      display: flex;
      flex-direction: row;
      height: 40px;
      left: 0;
      padding: 3px;
      position: absolute;
      right: 0;
      top: 0;
      z-index: 4;

      // filler
      &:before {
        content: "";
        flex-grow: 1;
      }
    }
  }

  .appWrapper__appBar {

    background-color: rgba(var(--color-appBar-bg), 1);
    border-right: 1px solid rgba(var(--color-border), 1);
    box-sizing: border-box;
    bottom: 0;
    display: flex;
    flex-direction: column;
    list-style-type: none;
    margin: 0;
    overflow-y: auto; // enable scrolling if more items than visible space
    padding-left: 0;
    position: absolute;
    top: $mobileToggleHeight;

    @include breakpoint(min-width $breakpointLayoutMobile + 1) {
      top: 0;
    }

    width: $appbarWidth;
    z-index: 4;

    // more styles related to app bar only see appBar.scss

    @include breakpoint(max-width $breakpointLayoutMobile) {
      width: $appbarWidthMobile;

      .appBar__item {
        > a {
          min-height: auto;
          padding: 8px 5px;
        }

        .iconUxt {
          margin: auto;
        }

        .item__title {
          display: none;
        }
      }

      a.appBar__item {
        min-height: auto;
        padding: 7px 5px 6px 5px;
      }
    }
  }

  .appWrapper__regions {
    bottom: 0;
    box-sizing: border-box;
    left: 0;
    overflow: hidden;
    position: absolute;
    right: 0;

    &.has-appBar {
      left: $appbarWidth;

      @include breakpoint(max-width $breakpointLayoutMobile) {
        left: $appbarWidthMobile;
      }
    }

    &:not(.has-appBar) {
      left: 0;

      // if there is appbar Markup but no has-appBar class set on regions wapper,
      // hide it
      + .appWrapper__appBar {
        display: none;
      }
    }

    &:not(.has-leadingRegion) {
      .leadingRegionToggleArea {
        display: none;
      }
    }

    &:not(.has-contextRegion) {
      .contextRegionToggleArea {
        display: none;
      }
    }

    top: $mobileToggleHeight;

    @include breakpoint(min-width $breakpointLayoutMobile + 1) {
      top: 0;
    }

    // ======================================================
    // space distribution overrides (main/context/item region
    @include breakpoint(min-width $breakpointLayoutPushed) {

      @each $width in $distributionWidths {
        &.has-distribution-width-#{$width} {

          .contextRegion,
          .itemRegion {
            width: #{percentage(math.div($width, 100))};
          }

          .itemRegion {
            right: -#{percentage(math.div($width, 100))};
          }

          &.appWrapper__regions--pushLayout.has-contextRegion.contextRegion-is-expanded .mainRegion {
            right: #{percentage(math.div($width, 100))};
          }
        }
      }

    }

    // ======================================================
  }

  .appHeader {
    align-items: center;
    background-color: rgba(var(--color-appHeader-bg), 1);
    border-bottom: 1px solid rgba(var(--color-border), 1);
    box-shadow: 0 0 4px 0 rgba(var(--color-shadow), 0.08);
    display: flex;
    height: 45px;
    position: relative;
    z-index: 4;

    .appHeader__breadcrumb {
      box-sizing: border-box;
      flex-grow: 1;
      max-height: 45px;
      max-width: 100%;
      overflow: hidden;
      padding-left: 16px;

      direction: rtl;
      text-align: left;
    }

    .appHeader__content {
      flex-shrink: 0;
      font-size: $ms0-fontSize;
      padding: 0 12px;
    }

    .appHeader__viewToggler {
      flex-shrink: 0;
      border-left: 1px solid rgba(var(--color-border), 1);
      padding: 0 12px 0 12px;

      button,
      .button {
        margin-left: 0;

        &.button--leading .iconUxt,
        &.button--context .iconUxt {
          @include iconUxt-regular(sidebar);
        }

        @at-root .appWrapper {
          .leadingRegion-is-expanded .appHeader__viewToggler {

            button,
            .button {
              &.button--leading .iconUxt {
                @include iconUxt-filled(sidebar);
              }
            }
          }

          .contextRegion-is-expanded .appHeader__viewToggler {

            button,
            .button {
              &.button--context .iconUxt {
                @include iconUxt-filled(sidebar);
              }
            }
          }
        }


        &.is-disabled,
        &:disabled {
          background-color: transparent;
        }
      }
    }
  }

  .leadingRegion,
  .mainRegion,
  .contextRegion,
  .itemRegion {
    bottom: 0;
    box-sizing: border-box;
    overflow-y: auto;
    position: absolute;
    top: 0;

    // 'enable' momentum scrolling for IOS
    @supports (-webkit-overflow-scrolling: touch) {
      overflow-y: scroll;
      -webkit-overflow-scrolling: touch;
    }
  }

  .has-appHeader {

    .leadingRegion,
    .mainRegion,
    .contextRegion,
    .itemRegion {
      top: 46px;
    }
  }

  // for all layouts that dont have the advanced app bar but use the app header
  &:not(.has-appBarAdvanced) {
    .appWrapper__regions.has-appHeader {
      top: 0;
    }
  }

  .leadingRegion {
    display: none;
    background-color: rgba(var(--color-interface-secondary), 1);
    border-right: 1px solid rgba(var(--color-border), 1);
    box-shadow: rgba(var(--color-shadow), 0.1) 0 4px 8px 0;
    left: 0;
    width: $leadingRegionWidth;
    z-index: 3;

    &--hasSpacing {
      padding: 16px 40px 48px 40px;

      @include breakpoint(max-width $breakpointLayoutMobile) {
        padding: 16px 16px 32px 16px;
      }
    }
  }

  .mainRegion {
    background-color: rgba(var(--color-interface), 1);
    bottom: 0;
    left: 0;
    right: 0;

    overflow-y: auto;
    //padding: 24px 30px 48px 30px; todo: see MDS-249087
    padding: 24px 40px 48px 40px;

    // IE and Firefox handle bottom spacing differently, should be adapted / harmonized some time:
    // make sure to check in simplegrid (negative bottom margin in last row)
    //> *:last-child {
    //    //padding-bottom: 48px;
    //}

    @include breakpoint(max-width $breakpointLayoutMobile) {
      padding: 16px 16px 32px 16px;

      // IE and Firefox handle bottom spacing differently, should be adapted / harmonized some time:
      //> *:last-child {
      //    //padding-bottom: 32px;
      //}
    }
  }

  .contextRegion,
  .itemRegion {
    background-color: rgba(var(--color-interface-secondary), 1);
    border-left: 1px solid rgba(var(--color-border), 1);
    box-shadow: rgba(var(--color-shadow), 0.1) 0 4px 8px 0;
    display: none;
    right: 0;
    width: $contextRegionWidth;
    z-index: 2;
  }

  .contextRegion {
    box-sizing: border-box;

    padding: 24px $itemRegionSpacing 48px $itemRegionSpacing;

    @include breakpoint(max-width $breakpointLayoutMobile) {
      padding: 16px $itemRegionSpacing 32px $itemRegionSpacing;
    }

    // todo: add in explanation table
    &.contextRegion--noSpacing {
      padding: 0;
    }
  }

  .itemRegion {
    box-sizing: border-box;
    display: flex;
    flex-direction: column;
    border-top: 1px solid rgba(var(--color-appBar-border), 1);
    box-shadow: rgba(var(--color-shadow), 0.1) 0px 0px 15px 0;
    right: -$contextRegionWidth - 20;
    width: $contextRegionWidth;
    transition: right 0.3s ease-in-out,
      transform 0.3s ease-in-out;
    transform-origin: 100% 100%;
    z-index: 5;

    // no slide-in transition for item region on smallest devices
    @include breakpoint($xs) {
      transition: none;
    }


    &__actions {
      flex-grow: 0;
      margin-left: $itemRegionSpacing;
      padding-right: $itemRegionSpacing;
      text-align: right;
    }

    &__content {
      box-sizing: border-box;
      flex-grow: 1;
      margin-left: $itemRegionSpacing;
      padding-right: $itemRegionSpacing;
      overflow: auto;
    }

    &.is-shown {
      right: 0 !important;
      transform: scale(1.005);

      // fullscreen display on smalles devices
      @include breakpoint($xs) {
        transform: none;
        width: 100%;
        z-index: 100;

        position: fixed;
        left: 0;
        right: 0;
        top: 0;
        bottom: 0;

        margin-top: $mobileToggleHeight + 4px;
      }

    }
  }

  .leadingRegionToggleArea,
  .contextRegionToggleArea {
    background-color: rgba(var(--color-interface-secondary), 1);
    border: 1px solid rgba(var(--color-border), 1);
    bottom: 0;
    display: block;
    height: 48px;
    margin: auto;
    opacity: 0.7;
    position: absolute;
    top: 0;
    transition: opacity 0.2s ease-in-out;
    width: $toggleAreaWidth;
    // z-index: 10;

    a {
      display: block;
      font-size: $ms3-fontSize;
      text-decoration: none;
      height: 100%;
      line-height: 48px;
      text-align: center;
      //transition: transform 0.2s ease-in-out;
      width: 100%;

      &:before {
        display: inline-block;
        transition: transform 0.4s ease-in-out;
      }
    }

    a,
    a:visited {
      color: rgba(var(--color-base200), 1);
    }
  }

  .leadingRegionToggleArea {
    border-bottom-right-radius: 3px;
    border-top-right-radius: 3px;
    left: -1px;

    a {
      @include iconUxt-filled(arrowRightExtraSmall);
    }

    &:hover {
      opacity: 1;
    }
  }

  .contextRegionToggleArea {
    border-bottom-left-radius: 3px;
    border-top-left-radius: 3px;
    right: -1px;

    a {
      @include iconUxt-filled(arrowLeftExtraSmall);
    }

    &:hover {
      opacity: 1;
    }
  }

  // old, legacy layout
  // only show toggle buttons and region altogether if region is present
  // toggling behaviour {
  .appWrapper__regions {
    &.has-leadingRegion {
      &.leadingRegion-is-expanded {
        .leadingRegion {
          display: block;
        }

        .leadingRegionToggleArea {
          left: $leadingRegionWidth - 1;

          a:before {
            transform: rotate(180deg);
          }
        }
      }

      .leadingRegionToggleArea {
        @include breakpoint(max-width $breakpointLayoutMobile) {
          display: none;
        }
      }

      & ~ .appWrapper__mobileToggle .leadingRegionToggle {
        display: block;
      }
    }

    &.has-contextRegion {
      &.has-contextRegion.contextRegion-is-expanded {
        .contextRegion {
          display: block;
        }

        .contextRegionToggleArea {
          right: $leadingRegionWidth - 1;

          a:before {
            transform: rotate(180deg);
          }
        }
      }

      .contextRegionToggleArea {
        @include breakpoint(max-width $breakpointLayoutMobile) {
          display: none;
        }
      }

      & ~ .appWrapper__mobileToggle .contextRegionToggle {
        display: block;
      }
    }

    // if no leading nor context region is present at all and mobile device width
    &:not(.has-contextRegion):not(.has-leadingRegion) {
      & ~ .appWrapper__mobileToggle {
        display: none;
      }

      & ~ .appWrapper__appBar {
        top: 0;
      }
    }

    // pushing behaviour, only enabled for > 768px
    @include breakpoint(min-width $breakpointLayoutPushed + 1) {
      &.appWrapper__regions--pushLayout {
        &.has-leadingRegion.leadingRegion-is-expanded {
          .leadingRegion {
            box-shadow: none;
          }

          .mainRegion {
            left: $leadingRegionWidth;
          }
        }

        .mainRegion {
          left: 0;
          right: 0;
        }

        &.has-contextRegion.contextRegion-is-expanded {
          .contextRegion {
            box-shadow: none;
          }

          .mainRegion {
            right: $contextRegionWidth;
          }
        }
      }
    }
  }
}